{"version":3,"file":"production.js","sources":["../src/main.js"],"sourcesContent":["// from https://github.com/mkremins/hubs/blob/hubs-cloud-barge/src/max-additions.js\r\n\r\n/// utils\r\n\r\nfunction createElement(htmlString) {\r\n  const div = document.createElement(\"div\");\r\n  div.innerHTML = htmlString.trim();\r\n  return div.firstChild;\r\n}\r\n\r\nfunction scale(num, oldLower, oldUpper, newLower, newUpper) {\r\n  const oldRange = oldUpper - oldLower;\r\n  const newRange = newUpper - newLower;\r\n  return ((num - oldLower) / oldRange) * newRange + newLower;\r\n}\r\n\r\nfunction randInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); // max exclusive, min inclusive\r\n}\r\n\r\nfunction retryUntilTruthy(fn, retryFrequencyMS) {\r\n  const interval = setInterval(function() {\r\n    const retVal = fn();\r\n    if (retVal) {\r\n      clearInterval(interval);\r\n    }\r\n  }, retryFrequencyMS);\r\n}\r\n\r\n/// constants\r\n\r\nconst MIC_PRESENCE_VOLUME_THRESHOLD = 0.00001;\r\n\r\nconst SPEECH_TIME_PER_TICK = 10; // every speech tick = 10ms of realtime\r\nconst MIN_SPEECH_TIME_FOR_EVENT = 100; // 0.1s realtime\r\nconst MAX_SPEECH_TIME_FOR_EVENT = 5000; // 5s realtime\r\nconst CONTINUOUS_SPEECH_LENIENCY_TIME = 100; // 0.1s realtime\r\n\r\nconst ORB_CONTAINER_POS = [0, 0, 0]; //[7,0,2]\r\nconst ORB_CONTAINER_SIZE = 1;\r\nconst ORB_CONTAINER_DEPTH = 4;\r\n\r\nconst MIN_ORB_SIZE = 0.05;\r\nconst MAX_ORB_SIZE = 0.9;\r\nconst SPEECH_ORB_LIFETIME = 1000 * 60 * 5; // 5mins realtime\r\nconst ORB_GROWTH_PER_TICK =\r\n  (MAX_ORB_SIZE - MIN_ORB_SIZE) / ((MAX_SPEECH_TIME_FOR_EVENT - MIN_SPEECH_TIME_FOR_EVENT) / SPEECH_TIME_PER_TICK);\r\n\r\nconst DST_ITEM_NAMES = [\r\n  \"book\",\r\n  \"jacket\",\r\n  \"pills\",\r\n  \"canteen\",\r\n  \"flashlight\",\r\n  \"compass\",\r\n  \"knife\",\r\n  \"mirror\",\r\n  \"newspaper\",\r\n  \"bottle\",\r\n  \"medic\",\r\n  \"map\"\r\n];\r\n\r\n/// main code\r\n\r\nconst interval = setInterval(initMaxAdditions, 10);\r\n\r\nlet showConversationBalanceViz = true;\r\n\r\nfunction initMaxAdditions(scene) {\r\n  if (!window.APP || !window.APP.scene) return;\r\n  clearInterval(interval);\r\n  console.log(\"!!!initMaxAdditions!!!\");\r\n\r\n  // remove the barge from scenes where the barge isn't wanted\r\n  retryUntilTruthy(function() {\r\n    const sceneNameHolder = document.querySelector(\"#environment-scene > a-entity > a-entity\");\r\n    if (!sceneNameHolder) return;\r\n    const sceneName = sceneNameHolder.className;\r\n    console.log(\"sceneName\", sceneName);\r\n    if (sceneName.includes(\"DSTTable\")) {\r\n      console.log(\"Removing barge from scene due to sceneName:\", sceneName);\r\n      document.querySelector(\"[socialvr-barge]\").remove();\r\n    }\r\n    if (sceneName.includes(\"BargeDemoWaypoints\")) {\r\n      console.log(\"Disabling conversation balance viz due to sceneName:\", sceneName);\r\n      showConversationBalanceViz = false;\r\n    }\r\n    return true;\r\n  }, 100);\r\n\r\n  // when we receive a speech event from another client, call the appropriate handler\r\n  NAF.connection.subscribeToDataChannel(\"startSpeech\", startSpeech);\r\n  NAF.connection.subscribeToDataChannel(\"stopSpeech\", stopSpeech);\r\n\r\n  // periodically poll for voice input to spawn utterances for this client\r\n  setInterval(speechTick, SPEECH_TIME_PER_TICK);\r\n\r\n  /*\r\n  // spawn orb container\r\n  const radius = ORB_CONTAINER_SIZE;\r\n  const center = ORB_CONTAINER_POS;\r\n  center[1] = ORB_CONTAINER_DEPTH / 2;\r\n  const wallPositions = [\r\n    `${center[0] - radius} ${center[1]} ${center[2]}`,\r\n    `${center[0]} ${center[1]} ${center[2] - radius}`,\r\n    `${center[0] + radius} ${center[1]} ${center[2]}`,\r\n    `${center[0]} ${center[1]} ${center[2] + radius}`\r\n  ];\r\n  const wallOrientations = [\"vert\", \"horiz\", \"vert\", \"horiz\"];\r\n  for (let i = 0; i < 4; i++) {\r\n    const isVert = wallOrientations[i] === \"vert\";\r\n    const wall = document.createElement(\"a-entity\");\r\n    wall.setAttribute(\"geometry\", {\r\n      primitive: \"box\",\r\n      width: isVert ? \"0.1\" : radius * 2,\r\n      height: ORB_CONTAINER_DEPTH,\r\n      depth: isVert ? radius * 2 : \"0.1\"\r\n    });\r\n    wall.setAttribute(\"material\", \"color:white;transparent:true;opacity:0.5\");\r\n    wall.setAttribute(\"position\", wallPositions[i]);\r\n    wall.setAttribute(\"body-helper\", {type: TYPE.STATIC});\r\n    wall.setAttribute(\"shape-helper\", {type: SHAPE.BOX});\r\n    APP.scene.appendChild(wall);\r\n  }\r\n  */\r\n\r\n  /*\r\n  // give unhatted avatars hats\r\n  // FIXME: don't poll for this, do it once on new user entry event\r\n  setInterval(function() {\r\n    for (let playerInfo of APP.componentRegistry[\"player-info\"]) {\r\n      spawnHat(playerInfo);\r\n    }\r\n  }, 1000);\r\n  */\r\n\r\n  // suppress visibility of all DST spawners until a moderater calls beginDST()\r\n  const suppressDSTInterval = setInterval(function() {\r\n    const dstSpawners = DST_ITEM_NAMES.map(name => document.querySelector(`.${name}`));\r\n    const cooldown = 1000 * 60 * 60 * 24 * 7; // one week is probably enough\r\n    for (const spawner of dstSpawners) {\r\n      if (!spawner) continue; // bail out early if no spawner found for this item name\r\n      spawner.setAttribute(\"visible\", false);\r\n    }\r\n  }, 1000);\r\n\r\n  // selectively re-disable spawners when they're used\r\n  function disableSpawner(senderId, dataType, data, targetId) {\r\n    console.log(\"disableSpawner\", data);\r\n    const spawner = document.querySelector(`.${data.itemName}`);\r\n    spawner.setAttribute(\"visible\", false);\r\n    spawner.object3D.position.y = -10; // do we have to hide it *both* ways? :(((\r\n  }\r\n  NAF.connection.subscribeToDataChannel(\"disableSpawner\", disableSpawner);\r\n\r\n  // code to enable DST spawners\r\n  function enableDSTSpawners() {\r\n    console.log(\"beginDST\");\r\n    clearInterval(suppressDSTInterval);\r\n    const dstSpawners = DST_ITEM_NAMES.map(name => document.querySelector(`.${name}`));\r\n    for (const spawner of dstSpawners) {\r\n      if (!spawner) continue;\r\n      spawner.setAttribute(\"visible\", true);\r\n\r\n      // attach a spawn event listener\r\n      spawner.addEventListener(\"spawned-entity-created\", function() {\r\n        const itemName = spawner.classList[0];\r\n        console.log(\"spawned-entity-created\", itemName);\r\n        const eventData = { itemName: itemName };\r\n        disableSpawner(null, null, eventData);\r\n        NAF.connection.broadcastData(\"disableSpawner\", eventData);\r\n      });\r\n    }\r\n  }\r\n  window.beginDST = function() {\r\n    enableDSTSpawners();\r\n    NAF.connection.broadcastData(\"beginDST\", {});\r\n  };\r\n  NAF.connection.subscribeToDataChannel(\"beginDST\", enableDSTSpawners);\r\n\r\n  // add a globally accessible event log to the window\r\n  window.eventLog = [];\r\n\r\n  // and a function for the moderator to log DST item positions\r\n  window.logItemPositions = logItemPositions;\r\n\r\n  // and a single \"log everything\" function\r\n  window.logEverything = function() {\r\n    logItemPositions();\r\n    return JSON.stringify(window.eventLog, null, 2);\r\n  };\r\n}\r\n\r\nfunction spawnHat(playerInfo) {\r\n  // bail out early if session ID not yet assigned\r\n  if (!playerInfo.playerSessionId) return;\r\n\r\n  // bail out early if avatar not yet loaded, or hat already present\r\n  const avatar = playerInfo.el;\r\n  if (!avatar.querySelector(\".Spine\")) return;\r\n  if (avatar.querySelector(\".hat\")) return;\r\n\r\n  // create, color, position, and scale the hat\r\n  const hat = document.createElement(\"a-entity\");\r\n  hat.classList.add(\"hat\");\r\n  hat.setAttribute(\"geometry\", \"primitive:cylinder;segmentsHeight:1;radius:0.16;height:0.25\");\r\n  const color = playerInfoToColor(playerInfo);\r\n  hat.setAttribute(\"material\", `color:${color};shader:flat`);\r\n  hat.setAttribute(\"position\", \"0 0 0\");\r\n\r\n  // add the hat to the avatar\r\n  avatar.querySelector(\".Spine\").appendChild(hat);\r\n\r\n  // add \"gloves\" if hands present\r\n  const leftHand = avatar.querySelector(\".LeftHand\");\r\n  if (leftHand) {\r\n    const leftGlove = document.createElement(\"a-entity\");\r\n    leftGlove.classList.add(\"glove\");\r\n    leftGlove.classList.add(\"leftGlove\");\r\n    leftGlove.setAttribute(\"geometry\", \"primitive:sphere;radius:0.1\");\r\n    leftGlove.setAttribute(\"material\", `color:${color};shader:flat`);\r\n    leftGlove.setAttribute(\"position\", \"0 0 0\");\r\n    leftHand.appendChild(leftGlove);\r\n  }\r\n  const rightHand = avatar.querySelector(\".RightHand\");\r\n  if (rightHand) {\r\n    const rightGlove = document.createElement(\"a-entity\");\r\n    rightGlove.classList.add(\"glove\");\r\n    rightGlove.classList.add(\"rightGlove\");\r\n    rightGlove.setAttribute(\"geometry\", \"primitive:sphere;radius:0.1\");\r\n    rightGlove.setAttribute(\"material\", `color:${color};shader:flat`);\r\n    rightGlove.setAttribute(\"position\", \"0 0 0\");\r\n    rightHand.appendChild(rightGlove);\r\n  }\r\n\r\n  return hat;\r\n}\r\n\r\nfunction sessionIDToColor(sessionID) {\r\n  return \"#\" + sessionID.substring(0, 6); // just use first 6 chars lol\r\n}\r\n\r\nfunction playerInfoToColor(playerInfo) {\r\n  // keys are \"Avatar listing sid\"s from Approved Avatars admin tab\r\n  const colorsByAvatar = {\r\n    WUvZgGK: \"lightskyblue\",\r\n    qpOOt9I: \"hotpink\",\r\n    \"2s2UuzN\": \"red\",\r\n    wAUg76e: \"limegreen\",\r\n    RczWQgy: \"#222\",\r\n    xb4PVBE: \"yellow\",\r\n    yw4c83R: \"purple\",\r\n    \"4r1KpVk\": \"orange\",\r\n    bs7pLac: \"darkblue\"\r\n  };\r\n  const avatarURL = playerInfo.data.avatarSrc;\r\n  for (const avatarSID of Object.keys(colorsByAvatar)) {\r\n    if (avatarURL.includes(avatarSID)) return colorsByAvatar[avatarSID];\r\n  }\r\n  return sessionIDToColor(playerInfo.playerSessionId);\r\n}\r\n\r\nfunction getPlayerInfo(sessionID) {\r\n  const playerInfos = APP.componentRegistry[\"player-info\"];\r\n  return playerInfos.find(pi => pi.playerSessionId === sessionID);\r\n}\r\n\r\nfunction logEvent(eventType, event) {\r\n  event.eventType = eventType;\r\n  event.timestamp = Date.now();\r\n  window.eventLog.push(event);\r\n}\r\n\r\nconst activeSpeechOrbs = {};\r\n\r\nfunction startSpeech(senderId, dataType, data, targetId) {\r\n  console.log(\"startSpeech\", senderId, dataType, data, targetId);\r\n  logEvent(\"startSpeech\", data);\r\n\r\n  // bail out early if conversation balance viz disabled\r\n  if (!showConversationBalanceViz) return;\r\n\r\n  // if no already-active speech orb for this speaker, spawn one\r\n  const activeOrb = activeSpeechOrbs[data.speaker];\r\n  if (activeOrb) {\r\n    activeOrb.classList.add(\"finished\"); // FIXME replace w/ stopSpeech call for consistency?\r\n  }\r\n  const playerInfo = getPlayerInfo(data.speaker);\r\n  const newOrb = spawnOrb(MIN_ORB_SIZE, playerInfoToColor(playerInfo));\r\n  activeSpeechOrbs[data.speaker] = newOrb;\r\n\r\n  // position the orb relative to the player and the center of the scene\r\n  const centerObj = document.querySelector(\".Table\");\r\n  const centerPos = centerObj ? centerObj.object3D.position.clone() : new THREE.Vector3(...ORB_CONTAINER_POS);\r\n  centerPos.y = 1.5;\r\n  const playerPos = playerInfo.el.object3D.position.clone();\r\n  playerPos.y = 1.5;\r\n  const offset = new THREE.Vector3().subVectors(playerPos, centerPos).normalize();\r\n  const orbPos = new THREE.Vector3().addVectors(centerPos, offset);\r\n  newOrb.setAttribute(\"position\", orbPos);\r\n}\r\n\r\nfunction stopSpeech(senderId, dataType, data, targetId) {\r\n  console.log(\"stopSpeech\", senderId, dataType, data, targetId);\r\n  logEvent(\"stopSpeech\", data);\r\n  const activeOrb = activeSpeechOrbs[data.speaker];\r\n  if (activeOrb) {\r\n    activeOrb.setAttribute(\"geometry\", {\r\n      primitive: \"cylinder\",\r\n      segmentsHeight: 1,\r\n      segmentsRadial: 6,\r\n      radius: 0.1,\r\n      height: data.size\r\n    });\r\n    activeOrb.classList.add(\"finished\");\r\n    delete activeSpeechOrbs[data.speaker];\r\n  }\r\n}\r\n\r\nfunction spawnOrb(size, color) {\r\n  color = color || \"yellow\";\r\n  console.log(\"spawnOrb\", size, color);\r\n\r\n  // create, color, position, and scale the orb\r\n  //const pos = ORB_CONTAINER_POS;\r\n  const orb = document.createElement(\"a-entity\");\r\n  orb.classList.add(\"speechOrb\");\r\n  orb.setAttribute(\"geometry\", {\r\n    primitive: \"cylinder\",\r\n    segmentsHeight: 1,\r\n    segmentsRadial: 6,\r\n    radius: 0.1,\r\n    height: size\r\n  });\r\n  orb.setAttribute(\"material\", `color:${color};shader:flat`);\r\n  //orb.setAttribute(\"position\", `${pos[0]} ${pos[1] + 5} ${pos[2]}`);\r\n\r\n  /*\r\n  // add physics and a collider\r\n  orb.setAttribute(\"body-helper\", {\r\n    collisionFilterMask: COLLISION_LAYERS.ALL,\r\n    gravity: {x: 0, y: -9.8, z: 0}\r\n  });\r\n  orb.setAttribute(\"shape-helper\", {type: SHAPE.SPHERE});\r\n  */\r\n\r\n  // add the orb to the scene\r\n  APP.scene.appendChild(orb);\r\n\r\n  // queue the orb for deletion later\r\n  setTimeout(() => orb.remove(), SPEECH_ORB_LIFETIME);\r\n\r\n  return orb;\r\n}\r\n\r\n// track how much the local user is talking\r\nlet continuousSpeechTime = 0;\r\nlet continuousSpeechLeniencyTime = 0;\r\n\r\nfunction doStopSpeech(speechTime) {\r\n  const orbSize = scale(speechTime, MIN_SPEECH_TIME_FOR_EVENT, MAX_SPEECH_TIME_FOR_EVENT, MIN_ORB_SIZE, MAX_ORB_SIZE);\r\n  const playerInfo = APP.componentRegistry[\"player-info\"][0];\r\n  const eventData = {\r\n    size: orbSize,\r\n    speaker: playerInfo.playerSessionId,\r\n    speakerName: playerInfo.displayName\r\n  };\r\n  stopSpeech(null, null, eventData); // local\r\n  NAF.connection.broadcastData(\"stopSpeech\", eventData); // networked\r\n}\r\n\r\nfunction speechTick() {\r\n  const playerInfo = APP.componentRegistry[\"player-info\"][0];\r\n  const muted = playerInfo.data.muted;\r\n  const localAudioAnalyser = window.APP.scene.systems[\"local-audio-analyser\"];\r\n  const speaking = !muted && localAudioAnalyser.volume > MIC_PRESENCE_VOLUME_THRESHOLD;\r\n\r\n  // maintain speech event state of local user, send events as needed\r\n  if (speaking) {\r\n    if (continuousSpeechTime === 0) {\r\n      // speech event started\r\n      const eventData = { speaker: playerInfo.playerSessionId, speakerName: playerInfo.displayName };\r\n      startSpeech(null, null, eventData); // local\r\n      NAF.connection.broadcastData(\"startSpeech\", eventData); // networked\r\n    }\r\n    continuousSpeechTime += SPEECH_TIME_PER_TICK;\r\n    continuousSpeechLeniencyTime = CONTINUOUS_SPEECH_LENIENCY_TIME;\r\n    // if this is a single really long speech event, break it off and start a new one\r\n    if (continuousSpeechTime >= MAX_SPEECH_TIME_FOR_EVENT) {\r\n      doStopSpeech(continuousSpeechTime);\r\n      continuousSpeechTime = 0;\r\n    }\r\n  } else {\r\n    if (continuousSpeechLeniencyTime > 0) {\r\n      continuousSpeechLeniencyTime -= SPEECH_TIME_PER_TICK;\r\n    }\r\n    if (continuousSpeechLeniencyTime <= 0 && continuousSpeechTime >= MIN_SPEECH_TIME_FOR_EVENT) {\r\n      // speech event ended\r\n      doStopSpeech(continuousSpeechTime);\r\n      continuousSpeechTime = 0;\r\n    }\r\n  }\r\n\r\n  // update speech orb sizes and positions\r\n  for (const finishedOrb of document.querySelectorAll(\".speechOrb.finished\")) {\r\n    const pos = finishedOrb.getAttribute(\"position\");\r\n    pos.y += ORB_GROWTH_PER_TICK; // synchronize movement speed with orb growth rate\r\n    finishedOrb.setAttribute(\"position\", pos);\r\n  }\r\n  for (const activeOrb of Object.values(activeSpeechOrbs)) {\r\n    // grow each active speech orb by ORB_GROWTH_PER_TICK\r\n    const size = activeOrb.getAttribute(\"geometry\").height + ORB_GROWTH_PER_TICK;\r\n    activeOrb.setAttribute(\"geometry\", {\r\n      primitive: \"cylinder\",\r\n      segmentsHeight: 1,\r\n      segmentsRadial: 6,\r\n      radius: 0.1,\r\n      height: size\r\n    });\r\n\r\n    // move its center upward by half of the growth amount,\r\n    // to keep the bottom position fixed at the \"now\" plane\r\n    const pos = activeOrb.getAttribute(\"position\");\r\n    pos.y += ORB_GROWTH_PER_TICK / 2;\r\n    activeOrb.setAttribute(\"position\", pos);\r\n  }\r\n}\r\n\r\n/// log item positions\r\n\r\nfunction makeItemNameTable() {\r\n  const itemNamesByModelURL = {};\r\n  for (const itemName of DST_ITEM_NAMES) {\r\n    const dstSpawner = document.querySelector(`.${itemName}`);\r\n    const modelURL = dstSpawner.components[\"gltf-model-plus\"].data.src;\r\n    itemNamesByModelURL[modelURL] = itemName;\r\n  }\r\n  return itemNamesByModelURL;\r\n}\r\n\r\n/*\r\nfunction makeCells() {\r\n  const table = document.querySelector(\".Table\");\r\n  const tablePos = table.object3D.position;\r\n  const cells = [];\r\n  const rowSize = 0.2;\r\n  const colSize = 0.2;\r\n  for (let row = 2; row >= 0; row--) {\r\n    for (let col = 0; col < 5; col++) {\r\n      const cellNum = cells.length;\r\n      const rowOffset = row - 1;\r\n      const colOffset = col - 2;\r\n      cells.push({\r\n        x: tablePos.x + (rowOffset * rowSize),\r\n        z: tablePos.z + (colOffset * colSize),\r\n        cellNum\r\n      });\r\n    }\r\n  }\r\n  return cells;\r\n}\r\n*/\r\n\r\nfunction makeCells() {\r\n  // hardcoded based on DSTTable scene\r\n  return [\r\n    { x: 0, z: -0.85, cellNum: 1 },\r\n    { x: 0, z: -0.71, cellNum: 2 },\r\n    { x: 0, z: -0.575, cellNum: 3 },\r\n    { x: 0, z: -0.45, cellNum: 4 },\r\n    { x: 0, z: -0.31, cellNum: 5 },\r\n    { x: 0, z: -0.17, cellNum: 6 },\r\n    { x: 0, z: -0.04, cellNum: 7 },\r\n    { x: 0, z: 0.09, cellNum: 8 },\r\n    { x: 0, z: 0.23, cellNum: 9 },\r\n    { x: 0, z: 0.365, cellNum: 10 },\r\n    { x: 0, z: 0.5, cellNum: 11 },\r\n    { x: 0, z: 0.635, cellNum: 12 }\r\n  ];\r\n}\r\n\r\nfunction getClosestCell(pos) {\r\n  const cells = makeCells();\r\n  cells.sort((a, b) => {\r\n    const aPos = new THREE.Vector3(a.x, 0, a.z);\r\n    const bPos = new THREE.Vector3(b.x, 0, b.z);\r\n    return pos.distanceToSquared(aPos) - pos.distanceToSquared(bPos);\r\n  });\r\n  return cells[0];\r\n}\r\n\r\nfunction logItemPositions() {\r\n  const eventData = { itemRanks: {}, itemPositions: {} };\r\n  const itemNameTable = makeItemNameTable();\r\n  // get potential DST items, i.e., objects spawned from super-spawners\r\n  const uiInteractables = [...document.querySelectorAll(\".interactable > .ui.interactable-ui\")];\r\n  const items = uiInteractables.map(el => el.parentNode);\r\n  for (const item of items) {\r\n    const itemModel = item.components[\"gltf-model-plus\"];\r\n    if (!itemModel) continue;\r\n    const itemName = itemNameTable[itemModel.data.src];\r\n    if (!itemName) continue;\r\n    const itemPos = item.object3D.position;\r\n    const cell = getClosestCell(itemPos);\r\n    eventData.itemRanks[itemName] = cell.cellNum;\r\n    eventData.itemPositions[itemName] = { x: itemPos.x, z: itemPos.z };\r\n  }\r\n  logEvent(\"itemPositions\", eventData);\r\n  return eventData;\r\n}"],"names":["MAX_SPEECH_TIME_FOR_EVENT","ORB_CONTAINER_POS","MIN_ORB_SIZE","SPEECH_ORB_LIFETIME","ORB_GROWTH_PER_TICK","DST_ITEM_NAMES","interval","setInterval","scene","window","APP","clearInterval","console","log","fn","retryFrequencyMS","retryUntilTruthy","sceneNameHolder","document","querySelector","sceneName","className","includes","remove","showConversationBalanceViz","NAF","connection","subscribeToDataChannel","startSpeech","stopSpeech","speechTick","suppressDSTInterval","dstSpawners","map","name","spawner","setAttribute","disableSpawner","senderId","dataType","data","targetId","itemName","object3D","position","y","enableDSTSpawners","addEventListener","classList","eventData","broadcastData","beginDST","eventLog","logItemPositions","logEverything","JSON","stringify","logEvent","eventType","event","timestamp","Date","now","push","activeSpeechOrbs","activeOrb","speaker","add","playerInfo","sessionID","componentRegistry","find","pi","playerSessionId","newOrb","size","color","orb","createElement","primitive","segmentsHeight","segmentsRadial","radius","height","appendChild","setTimeout","spawnOrb","colorsByAvatar","WUvZgGK","qpOOt9I","wAUg76e","RczWQgy","xb4PVBE","yw4c83R","bs7pLac","avatarURL","avatarSrc","avatarSID","Object","keys","substring","playerInfoToColor","centerObj","centerPos","clone","THREE","Vector3","playerPos","el","offset","subVectors","normalize","orbPos","addVectors","continuousSpeechTime","continuousSpeechLeniencyTime","doStopSpeech","speechTime","orbSize","oldLower","newLower","speakerName","displayName","muted","localAudioAnalyser","systems","volume","finishedOrb","querySelectorAll","pos","getAttribute","values","getClosestCell","cells","x","z","cellNum","sort","a","b","aPos","bPos","distanceToSquared","itemRanks","itemPositions","itemNameTable","itemNamesByModelURL","components","src","makeItemNameTable","items","parentNode","item","itemModel","itemPos","cell"],"mappings":"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"}